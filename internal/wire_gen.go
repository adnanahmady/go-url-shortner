// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/adnanahmady/go-url-shortner/internal/application"
	"github.com/adnanahmady/go-url-shortner/internal/domain"
	"github.com/adnanahmady/go-url-shortner/internal/infra"
	"github.com/adnanahmady/go-url-shortner/internal/presentation"
	"github.com/adnanahmady/go-url-shortner/pkg/applog"
	"github.com/adnanahmady/go-url-shortner/pkg/reqeust"
	"github.com/adnanahmady/go-url-shortner/pkg/store"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer() (*App, error) {
	applicationLogger := applog.NewApplicationLogger()
	server := request.NewServer(applicationLogger)
	loggingMiddleware := request.NewLoggingMiddleware(applicationLogger)
	memoryStoreManager := store.NewMemoryStore()
	memoryUrlRepository := infra.NewMemoryUrlRepository(memoryStoreManager)
	createShortUrlUseCaseImpl := application.NewCreateShortUrlUseCaseImpl(memoryUrlRepository)
	getShortUrlUseCaseImpl := application.NewGetShortUrlUseCaseImpl(memoryUrlRepository)
	v1Handlers := presentation.NewV1Handlers(createShortUrlUseCaseImpl, getShortUrlUseCaseImpl)
	v1Routers := presentation.NewV1Routers(server, v1Handlers)
	app := &App{
		Server:            server,
		Logger:            applicationLogger,
		LoggingMiddleware: loggingMiddleware,
		V1Routers:         v1Routers,
		StoreManager:      memoryStoreManager,
	}
	return app, nil
}

// wire.go:

type App struct {
	Server            *request.Server
	Logger            applog.Logger
	LoggingMiddleware *request.LoggingMiddleware
	V1Routers         *presentation.V1Routers
	StoreManager      store.StoreManager
}

var AppSet = wire.NewSet(applog.NewApplicationLogger, wire.Bind(new(applog.Logger), new(*applog.ApplicationLogger)), store.NewMemoryStore, wire.Bind(new(store.StoreManager), new(*store.MemoryStoreManager)), request.NewServer, request.NewLoggingMiddleware, presentation.NewV1Routers, presentation.NewV1Handlers, infra.NewMemoryUrlRepository, wire.Bind(new(domain.UrlRepository), new(*infra.MemoryUrlRepository)), application.NewCreateShortUrlUseCaseImpl, wire.Bind(new(application.CreateShortUrlUseCase), new(*application.CreateShortUrlUseCaseImpl)), application.NewGetShortUrlUseCaseImpl, wire.Bind(new(application.GetShortUrlUseCase), new(*application.GetShortUrlUseCaseImpl)), wire.Struct(new(App), "*"))
